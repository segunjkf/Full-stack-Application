name: 'Deploy infra'

on: 
  workflow_dispatch:  

env:
  # aws region
  AWS_REGION: eu-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_CLUSTER_NAME: ${{ secrets.AWS_CLUSTER_NAME }}
  AWS_ACCOUNT_NUMBER: ${{ secrets.AWS_ACCOUNT_NUMBER }}
  ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}


permissions:
  contents: read
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      working-directory: ./eks-cluster/terraform
      run: terraform init

    - name: Terraform Plan
      run: terraform plan 

    - name: Terraform Apply
      run: terraform apply -auto-approve 
        
  controller-set-up:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update KubeConfig
        shell: bash
        run: |
          aws eks update-kubeconfig --name ${{ env.AWS_CLUSTER_NAME }} --region=${{ env.region }}

      - name: Set-up eksctl 
        shell: bash
        run: curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp && sudo mv /tmp/eksctl /usr/local/bin

      - name: create service accounts
        shell: bash
        run: eksctl create iamserviceaccount \
             --cluster=full-stack-cluster \
             --namespace=kube-system \ 
             --name=aws-load-balancer-controller \
             --attach-policy-arn=arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:policy/AWSLoadBalancerControllerIAMPolicy \
             --override-existing-serviceaccounts \
             --approve

      - name: Set-up eksctl 
        shell: bash
        run: kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"

      - name: Set-up helm
        uses: azure/setup-helm@v3

      - name: Adding aws load-balancer controller helm
        shell: bash
        run: helm repo add eks https://aws.github.io/eks-charts  

      - name: set-up aws load-balancer controller 
        shell: bash
        run: helm repo add eks https://aws.github.io/eks-charts  && helm update repo

      - name: Install the TargetGroupBinding CRDs if upgrading the chart via helm upgrade
        shell: bash
        run: kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"

      - name: Install the helm chart if using IAM roles for service accounts
        shell: bash
        run: helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=${{ env.AWS_CLUSTER_NAME }} --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller  
      
      - name: Install the helm chart if using IAM roles for service accounts
        shell: bash
        run: kubectl create namespace argocd 

      - name: Install the TargetGroupBinding CRDs if upgrading the chart via helm upgrade
        shell: bash
        run: helm upgrade --install argocd https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml --set server.password="${{ env.ARGOCD_PASSWORD }}" -n argocd

      - name: Install the helm chart if using IAM roles for service accounts
        working-directory: ./argocd
        shell: bash
        run:  kubectl apply -f argocd.yaml

        
  








         
      
         
       
  
        
 



      
